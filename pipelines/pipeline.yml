# The following line helps maintain current documentation at http://docs.pivotal.io.
# code_snippet reference-pipeline start yaml

# Groups start yaml
groups:
- jobs:
    - install-opsman
    - expiring-certificates
    - delete-installation
    - test-platform-automation
    - export-installation
    - upgrade-opsman
    - download-upload-and-stage-healthwatch-pas-exporter
    - download-upload-and-stage-healthwatch
    - download-upload-and-stage-tas
    - configure-healthwatch-pas-exporter
    - configure-healthwatch
    - configure-tas
    - apply-product-changes-for-tas
    - apply-product-changes-for-hw
    - apply-product-changes-for-hw-exporter
    - run-tas-errands
    - run-hw-errands
    - run-hw-exporter-errands
#    - stage-configure-apply-telemetry
#    - collect-telemetry
  name: reference-pipeline
- jobs:
    - create-root-ca
    - apply-new-ca
    - activate-new-ca-and-regenerate-certs
    - apply-certificates
    - cleanup-ca-certificate-authorities
  name: certificate-rotation
# Groups end yaml

# code_snippet reference-resources-s3 start yaml
resource_types:
- name: s3-with-arn
  type: docker-image
  source:
    repository: concourse/s3-resource
    tag: 1.2.1-ubuntu
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
resources:
- name: platform-automation
  type: pivnet
  source:
    product_slug: platform-automation
    api_token: ((pivnet-refresh-token))

#- name: platform-automation-tasks
#  type: s3-with-arn
#  source:
#    access_key_id: ((s3_with_role.access_key_id))
#    secret_access_key: ((s3_with_role.secret_access_key))
#    aws_role_arn: ((s3_with_role.role_arn))
#    region_name: ((s3_region_name))
#    bucket: ((s3_pivnet_products_bucket))
#    regexp: .*tasks-(.*).zip
#
#- name: platform-automation-image
#  type: s3-with-arn
#  source:
#    access_key_id: ((s3_with_role.access_key_id))
#    secret_access_key: ((s3_with_role.secret_access_key))
#    aws_role_arn: ((s3_with_role.role_arn))
#    region_name: ((s3_region_name))
#    bucket: ((s3_pivnet_products_bucket))
#    regexp: .*image-(.*).tgz
#
#- name: telemetry-collector-binary
#  type: s3-with-arn
#  source:
#    access_key_id: ((s3_with_role.access_key_id))
#    secret_access_key: ((s3_with_role.secret_access_key))
#    aws_role_arn: ((s3_with_role.role_arn))
#    region_name: ((s3_region_name))
#    bucket: ((s3_pivnet_products_bucket))
#    regexp: .*telemetry-(.*).tgz
## code_snippet reference-resources-s3 end yaml

# code_snippet export-installation-resource-usage start yaml
#- name: installation
  #type: pivnet #placeholder till I get the scp resource working
#  type: s3-with-arn
#  source:
#    access_key_id: ((s3_with_role.access_key_id))
#    secret_access_key: ((s3_with_role.secret_access_key))
#    aws_role_arn: ((s3_with_role.role_arn))
#    region_name: ((s3_region_name))
#    bucket: ((s3_installation_bucket))
#    regexp: ((foundation))-installation-(.*).zip
# code_snippet export-installation-resource-usage end

# code_snippet resources-configurations start yaml
# VM state and foundation configuration
#- name: state
#  type: s3-with-arn
#  source:
#    access_key_id: ((s3_with_role.access_key_id))
#    secret_access_key: ((s3_with_role.secret_access_key))
#    aws_role_arn: ((s3_with_role.role_arn))
#    bucket: ((s3_foundation_state_bucket))
#    region_name: ((s3_region_name))
#    versioned_file: state-((foundation)).yml
#    initial_content_text: '{}'
#    initial_version: 'empty-start'
# state
- name: state
  type: git
  source:
    private_key: ((docs-ref-pipeline-repo-key.private_key))
    uri: ((docs-ref-pipeline-repo-uri))
    branch: develop
    #paths: "/foundations/homelab/state"

# configurations
- name: configuration
  type: git
  source:
    private_key: ((docs-ref-pipeline-repo-key.private_key))
    uri: ((docs-ref-pipeline-repo-uri))
    branch: develop
# code_snippet resources-configurations end yaml

# code_snippet resources-triggers start yaml
# triggers used to have jobs do something in a timely manner
#- name: one-time-trigger
#  type: time
#  source:
#    interval: 999999h
#
- name: daily-trigger
  type: time
  source:
    interval: 24h
# code_snippet resources-triggers end yaml

# code_snippet prepare-tasks-with-secrets-usage start yaml
# This task is used in multiple jobs
# The yaml anchor "*prepare-tasks-with-secrets" is used in its place
prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/foundations/config config/foundations/((foundation))/config
    VARS_PATHS: vars/foundations/((foundation))/vars
  output_mapping:
    tasks: platform-automation-tasks
# code_snippet prepare-tasks-with-secrets-usage end yaml
# code_snippet prepare-image-usage start yaml
prepare-image: &prepare-image
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-image.yml
  params:
    CA_CERTS: ((opsman-ssl.ca))
# code_snippet prepare-image-usage end yaml
# code_snippet reference-jobs start yaml
get-pai-and-pat: &get-pai-and-pat
  - get: platform-automation-image
    resource: platform-automation
    params:
      unpack: true
      globs: ["*image*.tgz"]
  - get: platform-automation-tasks
    resource: platform-automation
    params:
      unpack: true
      globs: ["*tasks*.zip"]

jobs:
- name: test-platform-automation
  serial: true
  plan:
    - in_parallel:  *get-pai-and-pat
    - get: configuration
    # code_snippet test-interpolate-usage start yaml
    - task: test-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/test-interpolate.yml
      params:
        CONFIG_FILE: foundations/((foundation))/config/download-tas.yml
        SKIP_MISSING: true
      input_mapping:
        config: configuration
    # code_snippet test-interpolate-usage end
    # code_snippet test-usage start yaml
    - task: test
      file: platform-automation-tasks/tasks/test.yml
      image: platform-automation-image
  # code_snippet test-usage end

- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:  *get-pai-and-pat
  - get: configuration
  - get: state
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-opsman.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: pivnet
    output_mapping:
      downloaded-product: opsman-image
  # code_snippet create-vm-usage start yaml
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
      config: configuration
      vars: configuration
    params:
      OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
      STATE_FILE: foundations/((foundation/state-((foundation)).yml
      VARS_FILES: vars/foundations/((foundation))/vars/director.yml
    ensure: &put-state
      do:
      - put: state
        params:
          file: generated-state/state-((foundation)).yml
          repository: state
  # code_snippet create-vm-usage end
  # code_snippet configure-authentication-usage start yaml
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: configuration
      config: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      AUTH_CONFIG_FILE: foundations/config/auth.yml
  # code_snippet configure-authentication-usage end
  # code_snippet configure-opsman-usage start yaml
  - task: configure-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-opsman.yml
    input_mapping:
      env: configuration
      config: configuration
      vars: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
      VARS_FILES: vars/foundations/((foundation))/vars/director.yml
  # code_snippet configure-opsman-usage end
  # code_snippet configure-director-usage start yaml
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: configuration
      vars: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      DIRECTOR_CONFIG_FILE: foundations/((foundation))/config/director.yml
      VARS_FILES: |
        vars/foundations/((foundation))/vars/director.yml
        vars/foundations/((foundation))/vars/tas.yml
  # code_snippet configure-director-usage end
  # code_snippet apply-director-changes-usage start yaml
  - task: apply-director-changes
    image: platform-automation-image
    attempts: 3
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet apply-director-changes-usage end
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: configuration
    params:
      INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
      ENV_FILE: foundations/config/env.yml
  #- put: installation
  #  params:
  #    file: installation/((foundation))-installation*.zip
  - task: scp-installation
    image: platform-automation-image
    file: configuration/tasks/scp-push.yml
    input_mapping:
      scp-files: installation
    params:
      PUSH_PULL: push
      HOST_FQDN: ((scp.host))
      HOST_PRIVATE_KEY: ((scp.private_key))
      HOST_USERNAME: ((scp.user))
      HOST_PATH: "/tmp"
      LOCAL_PATH: installation/*.zip

- name: export-installation
  serial_groups: [ install ]
  serial: true
  plan:
  - in_parallel:  *get-pai-and-pat
  - in_parallel:
    - get: state
    - get: configuration
      #passed: ["install-opsman" ]
    - get: daily-trigger
      trigger: true
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  # code_snippet revert-staged-changes-usage start yaml
  - task: revert-staged-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/revert-staged-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet revert-staged-changes-usage end
  # code_snippet export-installation-usage start yaml
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
  # code_snippet export-installation-usage end
#  - put: installation
#    params:
#      file: installation/((foundation))-installation*.zip
  - task: scp-installation
    image: platform-automation-image
    file: configuration/tasks/scp-push.yml
    input_mapping:
      custom-tasks-repo: configuration
      scp-files: installation
    params:
      PUSH_PULL: push
      HOST_FQDN: ((scp.host))
      HOST_PRIVATE_KEY: ((scp.private_key))
      HOST_USERNAME: ((scp.user))
      HOST_PATH: "/tmp/installations"
      LOCAL_PATH: scp-files/*.zip
#
- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:  *get-pai-and-pat
  - in_parallel:
    #- get: installation
      #passed: [ export-installation ]
    - get: state
    - get: configuration
      #passed: ["export-installation"]
      #trigger: true
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-opsman.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: pivnet
    output_mapping:
      downloaded-product: opsman-image
  # code_snippet upgrade-opsman-usage start yaml
  - task: scp-installation
    image: platform-automation-image
    file: configuration/tasks/scp-pull.yml
    input_mapping:
      custom-tasks-repo: configuration
    params:
      PUSH_PULL: pull
      HOST_FQDN: ((scp.host))
      HOST_PRIVATE_KEY: ((scp.private_key))
      HOST_USERNAME: ((scp.user))
      HOST_PATH: "/tmp/installations/*.zip"
      LOCAL_PATH: scp-files/((foundation))-installation.zip
  #- task: upgrade-opsman
  #  image: platform-automation-image
  #  file: platform-automation-tasks/tasks/upgrade-opsman.yml
  #  input_mapping:
  #    config: configuration
  #    env: configuration
  #    image: opsman-image
  #    installation: scp-files
  #    state: state
  #    vars: configuration
  #  params:
  #    ENV_FILE: foundations/config/env.yml
  #    OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
  #    STATE_FILE: state-((foundation)).yml
  #    INSTALLATION_FILE: ((foundation))-installation*.zip
  #    VARS_FILES: vars/foundations/((foundation))/vars/director.yml
  #  ensure: *put-state
  ## code_snippet upgrade-opsman-usage end
  #- task: configure-director
  #  image: platform-automation-image
  #  file: platform-automation-tasks/tasks/configure-director.yml
  #  input_mapping:
  #    config: configuration
  #    env: configuration
  #    vars: configuration
  #  params:
  #    ENV_FILE: foundations/config/env.yml
  #    DIRECTOR_CONFIG_FILE: foundations/((foundation))/config/director.yml
  #    VARS_FILES: |
  #      vars/foundations/((foundation))/vars/director.yml
  #      vars/foundations/((foundation))/vars/tas.yml
  #- task: apply-director-changes
  #  image: platform-automation-image
  #  file: platform-automation-tasks/tasks/apply-director-changes.yml
  #  attempts: 3
  #  input_mapping:
  #    env: configuration
  #  params:
  #    ENV_FILE: foundations/config/env.yml
  #- task: export-installation
  #  image: platform-automation-image
  #  file: platform-automation-tasks/tasks/export-installation.yml
  #  input_mapping:
  #    env: configuration
  #  params:
  #    ENV_FILE: foundations/config/env.yml
  #    INSTALLATION_FILE: ((foundation))-installation-$timestamp.zip
  #- task: scp-installation
  #  image: platform-automation-image
  #  file: configuration/tasks/scp.yml
  #  input_mapping:
  #    custom-tasks-repo: configuration
  #  params:
  #    PUSH_PULL: push
  #    HOST_FQDN: ((scp.host))
  #    HOST_PRIVATE_KEY: ((scp.private_key))
  #    HOST_USERNAME: ((scp.user))
  #    HOST_PATH: "/tmp"
  #    LOCAL_PATH: installation/*.zip
  #- put: installation
  #  params:
  #    file: installation/((foundation))-installation*.zip

- name: download-upload-and-stage-tas
  serial: true
  plan:
  - in_parallel:  *get-pai-and-pat
  - get: configuration
    passed: [ "upgrade-opsman" ]
    trigger: true
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  - task: download-tas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: configuration
      vars: configuration
    params:
      CONFIG_FILE: foundations/((foundation))/config/download-tas.yml
      VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
      SOURCE: pivnet
    output_mapping:
      downloaded-product: tas-product
      downloaded-stemcell: tas-stemcell
  # code_snippet upload-product-usage start yaml
  - task: upload-tas-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: tas-product
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet upload-product-usage end
  - task: upload-tas-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration
      stemcell: tas-stemcell
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet stage-product-usage start yaml
  - task: upload-and-stage-tas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: tas-product
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet stage-product-usage end
- name: download-upload-and-stage-healthwatch
  serial: true
  plan:
    - in_parallel:  *get-pai-and-pat
    - get: configuration
      passed: [ "upgrade-opsman" ]
      trigger: true
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/download-healthwatch.yml
        VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
        SOURCE: pivnet
      output_mapping:
        downloaded-product: healthwatch-product
        downloaded-stemcell: healthwatch-stemcell
    - task: upload-and-stage-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-and-stage-product.yml
      input_mapping:
        product: healthwatch-product
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
    - task: upload-healthwatch-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: configuration
        stemcell: healthwatch-stemcell
      params:
        ENV_FILE: foundations/config/env.yml

- name: download-upload-and-stage-healthwatch-pas-exporter
  serial: true
  plan:
    - in_parallel:  *get-pai-and-pat
    - get: configuration
      passed: [ "upgrade-opsman" ]
      trigger: true
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: download-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product.yml
      input_mapping:
        config: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/download-healthwatch-pas-exporter.yml
        VARS_FILES: vars/foundations/((foundation))/vars/versions.yml
        SOURCE: pivnet
      output_mapping:
        downloaded-product: healthwatch-pas-exporter
    - task: upload-and-stage-healthwatch-pas-exporter
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-and-stage-product.yml
      input_mapping:
        product: healthwatch-pas-exporter
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml

- name: configure-tas
  serial: true
  plan:
    - in_parallel:  *get-pai-and-pat
    - get: configuration
      passed: ["download-upload-and-stage-tas"]
      trigger: true
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-tas
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/cf.yml
        ENV_FILE: foundations/config/env.yml
        VARS_FILES: |
          vars/foundations/((foundation))/vars/tas.yml
          vars/foundations/((foundation))/vars/director.yml

- name: configure-healthwatch
  serial: true
  plan:
    - in_parallel:  *get-pai-and-pat
    - get: configuration
      passed: ["download-upload-and-stage-healthwatch"]
      trigger: true
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/p-healthwatch2.yml
        ENV_FILE: foundations/config/env.yml
        VARS_FILES: |
          vars/foundations/((foundation))/vars/director.yml

- name: configure-healthwatch-pas-exporter
  serial: true
  plan:
    - in_parallel:  *get-pai-and-pat
    - get: configuration
      passed: ["download-upload-and-stage-healthwatch-pas-exporter"]
      trigger: true
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-healthwatch
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        vars: configuration
      params:
        CONFIG_FILE: foundations/((foundation))/config/healthwatch-pas-exporter.yml
        ENV_FILE: foundations/config/env.yml
        VARS_FILES: |
          vars/foundations/((foundation))/vars/director.yml

- name: apply-product-changes-for-tas
  serial: true
  plan:
  - in_parallel:  *get-pai-and-pat
  - get: configuration
    passed:
    - configure-tas
    - configure-healthwatch
    - configure-healthwatch-pas-exporter
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  # code_snippet pre-deploy-check-usage start yaml
  - task: pre-deploy-check
    image: platform-automation-image
    file: platform-automation-tasks/tasks/pre-deploy-check.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet pre-deploy-check-usage end
  # code_snippet apply-changes-usage start yaml
  - task: apply-product-changes
    attempts: 3
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      SELECTIVE_DEPLOY_PRODUCTS: cf
  # code_snippet apply-changes-usage end
  # code_snippet check-pending-changes-usage start yaml
  # Maybe do this before the actual apply?
  #- task: check-pending-changes
  #  image: platform-automation-image
  #  file: platform-automation-tasks/tasks/check-pending-changes.yml
  #  input_mapping:
  #    env: configuration
  #  params:
  #    ENV_FILE: foundations/config/env.yml
  #    ALLOW_PENDING_CHANGES: true
  # code_snippet check-pending-changes-usage end
- name: run-tas-errands
  serial: true
  plan:
  - in_parallel:  *get-pai-and-pat
  - get: configuration
    passed:
    - apply-product-changes-for-tas
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  # code_snippet run-bosh-errand-usage start yaml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: deploy_autoscaler
      ENV_FILE: foundations/config/env.yml
      OPSMAN_SSH_PRIVATE_KEY: ((ops_manager.ssh_private_key))
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: deploy_notifications
      ENV_FILE: foundations/config/env.yml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: deploy_notifications_ui
      ENV_FILE: foundations/config/env.yml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: metric_registrar_smoke_test
      ENV_FILE: foundations/config/env.yml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: nfsbrokerpush
      ENV_FILE: foundations/config/env.yml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: push-apps-manager
      ENV_FILE: foundations/config/env.yml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: push-offline-docs
      ENV_FILE: foundations/config/env.yml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: push-tas-portal
      ENV_FILE: foundations/config/env.yml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: push-usage-service
      ENV_FILE: foundations/config/env.yml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: rotate_cc_database_key
      ENV_FILE: foundations/config/env.yml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: smbbrokerpush
      ENV_FILE: foundations/config/env.yml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: smoke_tests
      ENV_FILE: foundations/config/env.yml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: cf
      ERRAND_NAME: test-autoscaling
      ENV_FILE: foundations/config/env.yml


- name: apply-product-changes-for-hw
  serial: true
  plan:
  - in_parallel:  *get-pai-and-pat
  - get: configuration
    passed:
    - configure-healthwatch
    - apply-product-changes-for-tas
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  # code_snippet pre-deploy-check-usage start yaml
  - task: pre-deploy-check
    image: platform-automation-image
    file: platform-automation-tasks/tasks/pre-deploy-check.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet pre-deploy-check-usage end
  # code_snippet apply-changes-usage start yaml
  - task: apply-product-changes
    attempts: 3
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      SELECTIVE_DEPLOY_PRODUCTS: p-healthwatch2
  # code_snippet apply-changes-usage end
  # code_snippet check-pending-changes-usage start yaml
  # Maybe do this before the actual apply?
  #- task: check-pending-changes
  #  image: platform-automation-image
  #  file: platform-automation-tasks/tasks/check-pending-changes.yml
  #  input_mapping:
  #    env: configuration
  #  params:
  #    ENV_FILE: foundations/config/env.yml
  #    ALLOW_PENDING_CHANGES: true
  # code_snippet check-pending-changes-usage end
- name: run-hw-errands
  serial: true
  plan:
  - in_parallel:  *get-pai-and-pat
  - get: configuration
    passed:
    - apply-product-changes-for-hw
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  # code_snippet run-bosh-errand-usage start yaml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: p-healthwatch2
      ERRAND_NAME: smoke-test
      ENV_FILE: foundations/config/env.yml
      OPSMAN_SSH_PRIVATE_KEY: ((ops_manager.ssh_private_key))

- name: apply-product-changes-for-hw-exporter
  serial: true
  plan:
  - in_parallel:  *get-pai-and-pat
  - get: configuration
    passed:
    - configure-healthwatch-pas-exporter
    - apply-product-changes-for-hw
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  # code_snippet pre-deploy-check-usage start yaml
  - task: pre-deploy-check
    image: platform-automation-image
    file: platform-automation-tasks/tasks/pre-deploy-check.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
  # code_snippet pre-deploy-check-usage end
  # code_snippet apply-changes-usage start yaml
  - task: apply-product-changes
    attempts: 3
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: configuration
    params:
      ENV_FILE: foundations/config/env.yml
      SELECTIVE_DEPLOY_PRODUCTS: p-healthwatch2-pas-exporter
  # code_snippet apply-changes-usage end
  # code_snippet check-pending-changes-usage start yaml
  # Maybe do this before the actual apply?
  #- task: check-pending-changes
  #  image: platform-automation-image
  #  file: platform-automation-tasks/tasks/check-pending-changes.yml
  #  input_mapping:
  #    env: configuration
  #  params:
  #    ENV_FILE: foundations/config/env.yml
  #    ALLOW_PENDING_CHANGES: true
  # code_snippet check-pending-changes-usage end
- name: run-hw-exporter-errands
  serial: true
  plan:
  - in_parallel:  *get-pai-and-pat
  - get: configuration
    passed:
    - apply-product-changes-for-hw-exporter
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: prepare-image
    <<: *prepare-image
  # code_snippet run-bosh-errand-usage start yaml
  - task: run-bosh-errand
    image: platform-automation-image
    file: platform-automation-tasks/tasks/run-bosh-errand.yml
    input_mapping:
      env: configuration
    params:
      PRODUCT_NAME: p-healthwatch2-pas-exporter
      ERRAND_NAME: smoke-test
      ENV_FILE: foundations/config/env.yml
      OPSMAN_SSH_PRIVATE_KEY: ((ops_manager.ssh_private_key))

  # code_snippet run-bosh-errand-usage end
#- name: collect-telemetry
#  serial: true
#  serial_groups: [ install ]
#  plan:
#  - in_parallel: *get-pai-and-pat
#  - in_parallel:
#    - get: telemetry-collector-binary
#      params:
#        unpack: true
#    - get: configuration
#      passed: ["apply-product-changes"]
#  - task: prepare-tasks-with-secrets
#    <<: *prepare-tasks-with-secrets
#  - task: prepare-image
#    <<: *prepare-image
#  # code_snippet collect-telemetry-usage start yaml
#  - task: collect-telemetry-data
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/collect-telemetry.yml
#    input_mapping:
#      env: configuration
#      config: configuration
#    params:
#      CONFIG_FILE: foundations/((foundation))/config/telemetry.yml
#      ENV_FILE: foundations/config/env.yml
#  # code_snippet collect-telemetry-usage end
#  # code_snippet send-telemetry-usage start yaml
#  - task: send-telemetry-data
#    attempts: 3
#    image: platform-automation-image
#    file: platform-automation-tasks/tasks/send-telemetry.yml
#    params:
#      API_KEY: no-op-test-key
#      DATA_FILE_PATH: collected-telemetry-data/FoundationDetails*.tar
# code_snippet send-telemetry-usage end
- name: expiring-certificates
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel: *get-pai-and-pat
    - in_parallel:
      - get: daily-trigger
        trigger: true
      - get: configuration
      - get: state
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    # code_snippet expiring-certificates-usage start yaml
    - task: expiring-certificates
      image: platform-automation-image
      file: platform-automation-tasks/tasks/expiring-certificates.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
        EXPIRES_WITHIN: 2m
    # code_snippet expiring-certificates-usage end
#- name: stage-configure-apply-telemetry
#  serial_groups: [install]
#  plan:
#    - in_parallel: *get-pai-and-pat
#    - get: configuration
#      passed: ["apply-product-changes"]
#    - task: prepare-tasks-with-secrets
#      <<: *prepare-tasks-with-secrets
#    - task: prepare-image
#      <<: *prepare-image
#    # code_snippet stage-configure-apply-usage start yaml
#    - task: stage-configure-apply
#      image: platform-automation-image
#      file: platform-automation-tasks/tasks/stage-configure-apply.yml
#      attempts: 3
#      params:
#        CONFIG_FILE: foundations/((foundation))/config/p-telemetry.yml
#        STAGE_PRODUCT_CONFIG_FILE: foundations/((foundation))/config/p-telemetry.yml
#        ENV_FILE: foundations/config/env.yml
#        VARS_FILES: |
#          vars/foundations/((foundation))/vars/director.yml
#      input_mapping:
#        env: configuration
#        config: configuration
#        vars: configuration
    # code_snippet stage-configure-apply-usage end
- name: delete-installation
  serial: true
  serial_groups: [install]
  plan:
    - in_parallel: *get-pai-and-pat
    - in_parallel:
      - get: configuration
      - get: state
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    # code_snippet delete-installation-usage start yaml
    - task: delete-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
      # code_snippet delete-installation-usage end yaml
    # code_snippet delete-vm-usage start yaml
    - task: delete-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-vm.yml
      input_mapping:
        config: configuration
      params:
        OPSMAN_CONFIG_FILE: foundations/((foundation))/config/opsman.yml
        STATE_FILE: state-((foundation)).yml
        VARS_FILES: config/foundations/((foundation))/vars/director.yml
      ensure:
        do:
        - put: state
          params:
            file: generated-state/state-((foundation)).yml
    # code_snippet delete-vm-usage end

# code_snippet certificate-rotation start
- name: create-root-ca
  plan:
    - in_parallel: *get-pai-and-pat
    - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    # code_snippet configure-new-certificate-authority-usage start yaml
    - task: create-root-ca
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-new-certificate-authority.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
    # code_snippet configure-new-certificate-authority-usage end

- name: apply-new-ca
  serial: true
  plan:
    - in_parallel: *get-pai-and-pat
    - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: pre-deploy-check
      image: platform-automation-image
      file: platform-automation-tasks/tasks/pre-deploy-check.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
    - task: apply-product-changes
      attempts: 3
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
        SELECTIVE_DEPLOY_PRODUCTS: "cf,p-bosh,p-healthwatch2,p-healthwatch2-pas-exporter,pivotal-telemetry-om"

- name: activate-new-ca-and-regenerate-certs
  serial: true
  plan:
    - in_parallel: *get-pai-and-pat
    - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    # code_snippet activate-certificate-authority-usage start yaml
    - task: activate-new-ca
      image: platform-automation-image
      file: platform-automation-tasks/tasks/activate-certificate-authority.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
    # code_snippet activate-certificate-authority-usage end
    # code_snippet regenerate-certificates-usage start yaml
    - task: regenerate-certificates
      image: platform-automation-image
      file: platform-automation-tasks/tasks/regenerate-certificates.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
    # code_snippet regenerate-certificates-usage end

- name: apply-certificates
  serial: true
  plan:
    - in_parallel: *get-pai-and-pat
    - get: configuration
      passed: ["activate-new-ca-and-regenerate-certs"]
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: pre-deploy-check
      image: platform-automation-image
      file: platform-automation-tasks/tasks/pre-deploy-check.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
    - task: apply-product-changes
      attempts: 3
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
        SELECTIVE_DEPLOY_PRODUCTS: "cf,p-bosh,p-healthwatch2,p-healthwatch2-pas-exporter,pivotal-telemetry-om"

- name: cleanup-ca-certificate-authorities
  serial: true
  plan:
    - in_parallel: *get-pai-and-pat
    - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    # code_snippet delete-certificate-authority-usage start yaml
    - task: delete-certificate-authority
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-certificate-authority.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
    # code_snippet delete-certificate-authority-usage end
    - task: pre-deploy-check
      image: platform-automation-image
      file: platform-automation-tasks/tasks/pre-deploy-check.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
    - task: apply-product-changes
      attempts: 3
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: foundations/config/env.yml
        SELECTIVE_DEPLOY_PRODUCTS: "cf,p-bosh,p-healthwatch2,p-healthwatch2-pas-exporter,pivotal-telemetry-om"
# code_snippet certificate-rotation end
# code_snippet reference-jobs end yaml
# code_snippet reference-pipeline end
# The previous line helps maintain current documentation at http://docs.pivotal.io.
